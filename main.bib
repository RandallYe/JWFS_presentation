% Encoding: UTF-8

@Book{Moschovakis2006,
  title     = {{Notes on Set Theory }},
  publisher = {Springer},
  year      = {2006},
  author    = {Yiannis Moschovakis},
  owner     = {ykf_2001},
  timestamp = {2022.05.11},
}

@TechReport{Pitts2012,
  author      = {Andrew M. Pitts},
  institution = {University of Cambridge Computer Laboratory},
  title       = {{Lecture Notes on Denotational Semantics for the Computer Science}},
  year        = {2012},
  owner       = {ykf_2001},
}

@InProceedings{Winskel1993TheFS,
  author    = {Glynn Winskel},
  booktitle = {Foundation of computing series},
  title     = {The formal semantics of programming languages - an introduction},
  year      = {1993},
}

@Article{Mashburn1983,
  author  = {Joe Mashburn},
  journal = {Houston Journal of Mathematics},
  title   = {{The least fixed point property for omega-chain continuous functions}},
  year    = {1983},
  owner   = {ykf_2001},
}

@Article{Dubut2022,
  author    = {J{\'{e}}r{\'{e}}my Dubut and Akihisa Yamada},
  journal   = {Log. Methods Comput. Sci.},
  title     = {Fixed Points Theorems for Non-Transitive Relations},
  year      = {2022},
  number    = {1},
  volume    = {18},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  biburl    = {https://dblp.org/rec/journals/lmcs/DubutY22.bib},
  doi       = {10.46298/lmcs-18(1:30)2022},
  owner     = {ykf_2001},
}

@Book{Hoare1998,
  author    = {C.~A.~R.~Hoare and J.~He},
  title     = {{Unifying Theories of Programming}},
  year      = {1998},
  publisher = {Prentice-Hall},
  owner     = {ykf_2001},
  timestamp = {2021.05.24},
}

@InProceedings{Woodcock2004,
  author    = {Jim Woodcock and Ana Cavalcanti},
  title     = {{A Tutorial Introduction to Designs in Unifying Theories of Programming}},
  booktitle = {Integrated Formal Methods, 4th International Conference, {IFM} 2004, Canterbury, UK, April 4-7, 2004, Proceedings},
  year      = {2004},
  editor    = {Eerke A. Boiten and John Derrick and Graeme Smith},
  volume    = {2999},
  series    = {Lecture Notes in Computer Science},
  publisher = {Springer},
  pages     = {40--66},
  doi       = {10.1007/978-3-540-24756-2\_4},
  url       = {https://doi.org/10.1007/978-3-540-24756-2\_4},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  biburl    = {https://dblp.org/rec/conf/ifm/WoodcockC04.bib},
  owner     = {ykf_2001},
  timestamp = {2021.05.24},
}

@Article{Tarski1941,
  author    = {Alfred Tarski},
  journal   = {J. Symb. Log.},
  title     = {On the Calculus of Relations},
  year      = {1941},
  number    = {3},
  pages     = {73--89},
  volume    = {6},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  biburl    = {https://dblp.org/rec/journals/jsyml/Tarski41.bib},
  doi       = {10.2307/2268577},
}

@Article{Hoare1984,
  author  = {Charles Antony Richard Hoare},
  journal = {Philosophical Transactions of the Royal Society of London. Series A, Mathematical and Physical Sciences},
  title   = {Programs are predicates},
  year    = {1984},
  pages   = {475 - 489},
  volume  = {312},
}

@Article{Hehner1984,
  author    = {Eric C. R. Hehner},
  title     = {Predicative programming Part II},
  year      = {1984},
  month     = {2},
  pages     = {144?151},
  abstract  = {Part I of this two-part paper presented a new semantics of programs. Each program is considered to be a predicate, in a restricted notation, that specifies the observable behavior of a computer executing the program. We considered a variety of notations, including assignment, composition (semicolon), deterministic choice (if), nondeterministic choice, definition (nonrecursive and recursive), and variable declaration. We did not consider any input or output notations, or concurrency; that is the subject of Part II. We assume the reader is familiar with Part I, so that we can build on ideas presented there.},
  address   = {New York, NY, USA},
  booktitle = {Commun. ACM},
  day       = {1},
  doi       = {10.1145/69610.357990},
  keywords  = {predicative programming},
  pagetotal = {8},
  publisher = {Association for Computing Machinery},
  url       = {https://doi.org/10.1145/69610.357990},
}

@Article{Hehner1984a,
  author    = {Eric C. R. Hehner},
  title     = {Predicative programming Part I},
  year      = {1984},
  month     = {2},
  pages     = {134?143},
  abstract  = {Programs are given a new semantics with the merit that a specification written as a first-order predicate can be refined, step by step, to a program via the rules of Predicate Calculus. The semantics allows a free mixture of predicate and programming notations, and manipulation of programs.},
  address   = {New York, NY, USA},
  booktitle = {Commun. ACM},
  day       = {1},
  doi       = {10.1145/69610.357988},
  keywords  = {predicative programming},
  pagetotal = {10},
  publisher = {Association for Computing Machinery},
  url       = {https://doi.org/10.1145/69610.357988},
}

@InProceedings{Hehner2004,
  author    = {Eric C. R. Hehner},
  booktitle = {Mathematics of Program Construction, 7th International Conference, {MPC} 2004, Stirling, Scotland, UK, July 12-14, 2004, Proceedings},
  title     = {Probabilistic Predicative Programming},
  year      = {2004},
  editor    = {Dexter Kozen and Carron Shankland},
  pages     = {169--185},
  publisher = {Springer},
  series    = {Lecture Notes in Computer Science},
  volume    = {3125},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  biburl    = {https://dblp.org/rec/conf/mpc/Hehner04.bib},
  doi       = {10.1007/978-3-540-27764-4\_10},
  timestamp = {Tue, 14 May 2019 10:00:46 +0200},
  url       = {https://doi.org/10.1007/978-3-540-27764-4\_10},
}

@Article{Hehner2011,
  author    = {Eric C. R. Hehner},
  journal   = {Formal Aspects Comput.},
  title     = {A probability perspective},
  year      = {2011},
  number    = {4},
  pages     = {391--419},
  volume    = {23},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  biburl    = {https://dblp.org/rec/journals/fac/Hehner11.bib},
  doi       = {10.1007/s00165-010-0157-0},
  timestamp = {Mon, 09 May 2022 16:20:12 +0200},
  url       = {https://doi.org/10.1007/s00165-010-0157-0},
}

@Article{Hehner1999,
  author   = {Eric C.R. Hehner},
  journal  = {Science of Computer Programming},
  title    = {Specifications, programs, and total correctness},
  year     = {1999},
  issn     = {0167-6423},
  number   = {3},
  pages    = {191-205},
  volume   = {34},
  abstract = {This paper argues the following positions: that a formal specification is a boolean expression, that a program is a specification, and that total correctness is a poor choice of semantics.},
  doi      = {https://doi.org/10.1016/S0167-6423(98)00027-6},
  keywords = {Specification, Program, Total correctness},
  url      = {https://www.sciencedirect.com/science/article/pii/S0167642398000276},
}

@Article{Kozen1985,
  author   = {Dexter Kozen},
  journal  = {Journal of Computer and System Sciences},
  title    = {A probabilistic PDL},
  year     = {1985},
  issn     = {0022-0000},
  number   = {2},
  pages    = {162-178},
  volume   = {30},
  abstract = {In this paper we give a probabilistic analog PPDL of Propositional Dynamic Logic. We prove a small model property and give a polynomial space decision procedure for formulas involving well-structured programs. We also give a deductive calculus and illustrate its use by calculating the expected running time of a simple random walk.},
  doi      = {https://doi.org/10.1016/0022-0000(85)90012-1},
  url      = {https://www.sciencedirect.com/science/article/pii/0022000085900121},
}

@InProceedings{Morgan1996,
  author = {Morgan, Carroll},
  title  = {Proof rules for probabilistic loops},
  year   = {1996},
  month  = {07},
  doi    = {10.14236/ewic/RW1996.10},
}

@Article{FerrerFioriti2015,
  author     = {Ferrer Fioriti, Luis Mar\'{\i}a and Hermanns, Holger},
  journal    = {SIGPLAN Not.},
  title      = {Probabilistic Termination: Soundness, Completeness, and Compositionality},
  year       = {2015},
  issn       = {0362-1340},
  month      = {jan},
  number     = {1},
  pages      = {489?501},
  volume     = {50},
  abstract   = {We propose a framework to prove almost sure termination for probabilistic programs with real valued variables. It is based on ranking supermartingales, a notion analogous to ranking functions on non-probabilistic programs. The framework is proven sound and complete for a meaningful class of programs involving randomization and bounded nondeterminism. We complement this foundational insigh by a practical proof methodology, based on sound conditions that enable compositional reasoning and are amenable to a direct implementation using modern theorem provers. This is integrated in a small dependent type system, to overcome the problem that lexicographic ranking functions fail when combined with randomization. Among others, this compositional methodology enables the verification of probabilistic programs outside the complete class that admits ranking supermartingales.},
  address    = {New York, NY, USA},
  doi        = {10.1145/2775051.2677001},
  issue_date = {January 2015},
  keywords   = {termination, program verification, supermartingales, probabilistic programs},
  numpages   = {13},
  publisher  = {Association for Computing Machinery},
  url        = {https://doi.org/10.1145/2775051.2677001},
}

@Book{McIver2005,
  author    = {Annabelle McIver and Carroll Morgan},
  publisher = {Springer},
  title     = {Abstraction, Refinement and Proof for Probabilistic Systems},
  year      = {2005},
  isbn      = {978-0-387-40115-7},
  series    = {Monographs in Computer Science},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  biburl    = {https://dblp.org/rec/series/mcs/McIverM05.bib},
  doi       = {10.1007/b138392},
}

@Book{2020,
  publisher = {Cambridge University Press},
  title     = {Foundations of Probabilistic Programming},
  year      = {2020},
  doi       = {10.1017/9781108770750},
  place     = {Cambridge},
}

@InBook{Dahlqvist2020,
  author    = {Dahlqvist, Fredrik and Silva, Alexandra and Kozen, Dexter},
  editor    = {Barthe, Gilles and Katoen, Joost-Pieter and Silva, AlexandraEditors},
  pages     = {1–42},
  publisher = {Cambridge University Press},
  title     = {Semantics of Probabilistic Programming: A Gentle Introduction},
  year      = {2020},
  booktitle = {Foundations of Probabilistic Programming},
  doi       = {10.1017/9781108770750.002},
  place     = {Cambridge},
}

@Book{Thrun2005,
  author    = {Thrun, Sebastian and Burgard, Wolfram and Fox, Dieter},
  publisher = {The MIT Press},
  title     = {Probabilistic Robotics (Intelligent Robotics and Autonomous Agents)},
  year      = {2005},
  isbn      = {0262201623},
}

@Article{Ye2022,
  author = {Kangfeng Ye and Ana Cavalcanti and Simon Foster and Alvaro Miyazawa and Jim Woodcock},
  title  = {Probabilistic modelling and verification using RoboChart and PRISM},
  year   = {2022},
  issn   = {1619-1366},
  pages  = {667-716},
  volume = {21},
  doi    = {10.1007/s10270-021-00916-8},
}

@Article{Miyazawa2019,
  author = {Alvaro Miyazawa and Pedro Ribeiro and Wei Li and Ana Cavalcanti and Jon Timmis and Jim Woodcock},
  title  = {RoboChart: modelling and verification of the functional behaviour of robotic applications},
  year   = {2019},
  issn   = {1619-1366},
  pages  = {3097-3149},
  volume = {18},
  doi    = {10.1007/s10270-018-00710-z},
}

@InProceedings{Kwiatkowska2011,
  author    = {Marta Z. Kwiatkowska and Gethin Norman and David Parker},
  booktitle = {Computer Aided Verification - 23rd International Conference, {CAV} 2011, Snowbird, UT, USA, July 14-20, 2011. Proceedings},
  title     = {{PRISM} 4.0: Verification of Probabilistic Real-Time Systems},
  year      = {2011},
  editor    = {Ganesh Gopalakrishnan and Shaz Qadeer},
  pages     = {585--591},
  publisher = {Springer},
  series    = {Lecture Notes in Computer Science},
  volume    = {6806},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  biburl    = {https://dblp.org/rec/conf/cav/KwiatkowskaNP11.bib},
  doi       = {10.1007/978-3-642-22110-1\_{4}{7}},
  url       = {https://doi.org/10.1007/978-3-642-22110-1_47},
}

@InProceedings{Ye2021,
  author    = {Ye, Kangfeng and Foster, Simon and Woodcock, Jim},
  booktitle = {Relational and Algebraic Methods in Computer Science},
  title     = {Automated Reasoning for Probabilistic Sequential Programs with Theorem Proving},
  year      = {2021},
  address   = {Cham},
  editor    = {Fahrenberg, Uli and Gehrke, Mai and Santocanale, Luigi and Winter, Michael},
  pages     = {465--482},
  publisher = {Springer International Publishing},
  abstract  = {Semantics for nondeterministic probabilistic sequential programs has been well studied in the past decades. In a variety of semantic models, how nondeterministic choice interacts with probabilistic choice is the most significant difference. In He, Morgan, and McIver's relational model, probabilistic choice refines nondeterministic choice. This model is general because of its predicative-style semantics in Hoare and He's Unifying Theories of Programming, and suitable for automated reasoning because of its algebraic feature. Previously, we gave probabilistic semantics to the RoboChart notation based on this model, and also formalised the proof that the semantic embedding is a homomorphism, and revealed interesting details. In this paper, we present our mechanisation of the proof in Isabelle/UTP enabling automated reasoning for probabilistic sequential programs including a subset of the RoboChart language. With mechanisation, we even reveal more interesting questions, hidden in the original model. We demonstrate several examples, including an example to illustrate the interaction between nondeterministic choice and probabilistic choice, and a RoboChart model for randomisation based on binary probabilistic choice.},
  isbn      = {978-3-030-88701-8},
}

@InBook{McIver2005,
  pages     = {3--36},
  publisher = {Springer New York},
  title     = {Introduction to pGCL: Its logic and its model},
  year      = {2005},
  address   = {New York, NY},
  isbn      = {978-0-387-27006-7},
  booktitle = {Abstraction, Refinement and Proof for Probabilistic Systems},
  doi       = {10.1007/0-387-27006-X_1},
  url       = {https://doi.org/10.1007/0-387-27006-X_1},
}

@Article{Foster2020,
  author   = {Simon Foster and James Baxter and Ana Cavalcanti and Jim Woodcock and Frank Zeyda},
  journal  = {Science of Computer Programming},
  title    = {Unifying semantic foundations for automated verification tools in Isabelle/UTP},
  year     = {2020},
  issn     = {0167-6423},
  pages    = {102510},
  volume   = {197},
  abstract = {The growing complexity and diversity of models used for engineering dependable systems implies that a variety of formal methods, across differing abstractions, paradigms, and presentations, must be integrated. Such an integration requires unified semantic foundations for the various notations, and co-ordination of a variety of automated verification tools. The contribution of this paper is Isabelle/UTP, an implementation of Hoare and He's Unifying Theories of Programming, a framework for unification of formal semantics. Isabelle/UTP permits the mechanisation of computational theories for diverse paradigms, and their use in constructing formalised semantics. These can be further applied in the development of verification tools, harnessing Isabelle's proof automation facilities. Several layers of mathematical foundations are developed, including lenses to model variables and state spaces as algebraic objects, alphabetised predicates and relations to model programs, algebraic and axiomatic semantics, proof tools for Hoare logic and refinement calculus, and UTP theories to encode computational paradigms.},
  doi      = {https://doi.org/10.1016/j.scico.2020.102510},
  keywords = {Theorem proving, Lenses, Unifying theories of programming, Hoare logic, Isabelle/HOL},
  url      = {https://www.sciencedirect.com/science/article/pii/S0167642320301192},
}

@InProceedings{Woodcock2019,
  author    = {Woodcock, Jim and Cavalcanti, Ana and Foster, Simon and Mota, Alexandre and Ye, Kangfeng},
  booktitle = {Unifying Theories of Programming},
  title     = {{Probabilistic Semantics for RoboChart}},
  year      = {2019},
  address   = {Cham},
  editor    = {Ribeiro, Pedro and Sampaio, Augusto},
  pages     = {80--105},
  publisher = {Springer International Publishing},
  abstract  = {We outline a probabilistic denotational semantics for the RoboChart language, a diagrammatic, domain-specific notation for describing robotic controllers with their hardware platforms and operating environments. We do this using a powerful (but perhaps not so well known) semantic technique: He, Morgan, and McIver's weakest completion semantics, which is based on Hoare and He's Unifying Theories of Programming. In this approach, we do the following: (1) start with the standard semantics for a nondeterministic programming language; (2) propose a new probabilistic semantic domain; (3) propose a forgetful function from the probabilistic semantic domain to the standard semantic domain; (4) use the converse of the forgetful function to embed the standard semantic domain in the probabilistic semantic domain; (5) demonstrate that this embedding preserves program structure; (6) define the probabilistic choice operator. Weakest completion semantics guides the semantic definition of new languages by building on existing semantics and, in this case, tackling a notoriously thorny issue: the relationship between demonic and probabilistic choice. Consistency ensures that programming intuitions, development techniques, and proof methods can be carried over from the standard language to the probabilistic one. We largely follow He et al., our contribution being an explication of the technique with meticulous proofs suitable for mechanisation in Isabelle/UTP.},
  isbn      = {978-3-030-31038-7},
}

@Article{Kozen1981,
  author   = {Dexter Kozen},
  journal  = {Journal of Computer and System Sciences},
  title    = {Semantics of probabilistic programs},
  year     = {1981},
  issn     = {0022-0000},
  number   = {3},
  pages    = {328-350},
  volume   = {22},
  abstract = {This paper presents two complementary but equivalent semantics for a high level probabilistic programming language. One of these interprets programs as partial measurable functions on a measurable space. The other interprets programs as continuous linear operators on a Banach space of measures. It is shown how the ordered domains of Scott and others are embedded naturally into these spaces. We use the semantics to prove a general result about probabilistic programs, namely, that a program's behavior is completely determined by its action on fixed inputs.},
  doi      = {https://doi.org/10.1016/0022-0000(81)90036-2},
  url      = {https://www.sciencedirect.com/science/article/pii/0022000081900362},
}

@Article{Morgan1999,
  author    = {Morgan, Carroll and McI, A},
  title     = {{pGCL: Formal reasoning for random algorithms}},
  year      = {1999},
  publisher = {South African Computer Society (SAICSIT)},
}

@Book{Dijkstra1976,
  author    = {Dijkstra, E.W.},
  publisher = {Prentice-Hall},
  title     = {A Discipline of Programming},
  year      = {1976},
  isbn      = {9780132158718},
  series    = {Prentice-Hall Series in Automa},
  lccn      = {75040478},
  url       = {https://books.google.co.uk/books?id=MsUmAAAAMAAJ},
}

@Book{Kozen1983,
  author    = {D. Kozen},
  title     = {{A Probabilistic PDL}},
  year      = {1983},
  number    = {RC 9874},
  series    = {Research reports / IBM},
  pagetotal = {14},
  ppn_gvk   = {220871051},
}

@TechReport{Hurd2003,
  author      = {Hurd, Joe},
  institution = {University of Cambridge, Computer Laboratory},
  title       = {{Formal verification of probabilistic algorithms}},
  year        = {2003},
  month       = may,
  number      = {UCAM-CL-TR-566},
  doi         = {10.48456/tr-566},
  url         = {https://www.cl.cam.ac.uk/techreports/UCAM-CL-TR-566.pdf},
}

@Article{Hurd2005,
  author    = {Joe Hurd and Annabelle McIver and Carroll Morgan},
  journal   = {Theor. Comput. Sci.},
  title     = {Probabilistic guarded commands mechanized in \emph{HOL}},
  year      = {2005},
  number    = {1},
  pages     = {96--112},
  volume    = {346},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  biburl    = {https://dblp.org/rec/journals/tcs/HurdMM05.bib},
  doi       = {10.1016/j.tcs.2005.08.005},
}

@Article{Hoare1969,
  author    = {C. A. R. Hoare},
  journal   = {Commun. {ACM}},
  title     = {An Axiomatic Basis for Computer Programming},
  year      = {1969},
  number    = {10},
  pages     = {576--580},
  volume    = {12},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  biburl    = {https://dblp.org/rec/journals/cacm/Hoare69.bib},
  doi       = {10.1145/363235.363259},
}

@InProceedings{He2004,
  author    = {He, Jifeng and Morgan, Carroll and McIver, Annabelle},
  booktitle = {Formal Methods and Software Engineering},
  title     = {Deriving Probabilistic Semantics Via the `Weakest Completion'},
  year      = {2004},
  address   = {Berlin, Heidelberg},
  editor    = {Davies, Jim and Schulte, Wolfram and Barnett, Mike},
  pages     = {131--145},
  publisher = {Springer Berlin Heidelberg},
  abstract  = {A theory of programming is intended to aid the construction of programs that meet their specifications; for such a theory to be useful it should capture (only) the essential aspects of the program's behaviour, that is only those aspects which one wishes to observe. And it should do so in a mathematically elegant -- hence tractable -- way.},
  isbn      = {978-3-540-30482-1},
  owner     = {ykf_2001},
  timestamp = {2020.03.04},
}

@InProceedings{McIver2005a,
  author    = {Annabelle McIver and Tjark Weber},
  booktitle = {Logic for Programming, Artificial Intelligence, and Reasoning, 12th International Conference, {LPAR} 2005, Montego Bay, Jamaica, December 2-6, 2005, Proceedings},
  title     = {Towards Automated Proof Support for Probabilistic Distributed Systems},
  year      = {2005},
  editor    = {Geoff Sutcliffe and Andrei Voronkov},
  pages     = {534--548},
  publisher = {Springer},
  series    = {Lecture Notes in Computer Science},
  volume    = {3835},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  biburl    = {https://dblp.org/rec/conf/lpar/McIverW05.bib},
  doi       = {10.1007/11591191\_{3}{7}},
  url       = {https://doi.org/10.1007/11591191_37},
}

@InProceedings{McIver2013,
  author    = {Annabelle McIver and Tahiry M. Rabehaja and Georg Struth},
  booktitle = {Proceedings 11th International Workshop on Quantitative Aspects of Programming Languages and Systems, {QAPL} 2013, Rome, Italy, March 23-24, 2013},
  title     = {Probabilistic Concurrent Kleene Algebra},
  year      = {2013},
  editor    = {Luca Bortolussi and Herbert Wiklicky},
  pages     = {97--115},
  series    = {{EPTCS}},
  volume    = {117},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  biburl    = {https://dblp.org/rec/journals/corr/McIverRS13.bib},
  doi       = {10.4204/EPTCS.117.7},
}

@InProceedings{McIver2020,
  author    = {Annabelle McIver and Carroll Morgan},
  booktitle = {Leveraging Applications of Formal Methods, Verification and Validation: Verification Principles - 9th International Symposium on Leveraging Applications of Formal Methods, ISoLA 2020, Rhodes, Greece, October 20-30, 2020, Proceedings, Part {I}},
  title     = {Correctness by Construction for Probabilistic Programs},
  year      = {2020},
  editor    = {Tiziana Margaria and Bernhard Steffen},
  pages     = {216--239},
  publisher = {Springer},
  series    = {Lecture Notes in Computer Science},
  volume    = {12476},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  biburl    = {https://dblp.org/rec/conf/isola/McIverM20.bib},
  doi       = {10.1007/978-3-030-61362-4\_{1}{2}},
  url       = {https://doi.org/10.1007/978-3-030-61362-4_12},
}

@InProceedings{Hurd2002,
  author    = {Joe Hurd},
  booktitle = {Theorem Proving in Higher Order Logics, 15th International Conference, TPHOLs 2002, Hampton, VA, USA, August 20-23, 2002, Proceedings},
  title     = {{A Formal Approach to Probabilistic Termination}},
  year      = {2002},
  editor    = {Victor Carre{\~{n}}o and C{\'{e}}sar A. Mu{\~{n}}oz and Sofi{\`{e}}ne Tahar},
  pages     = {230--245},
  publisher = {Springer},
  series    = {Lecture Notes in Computer Science},
  volume    = {2410},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  biburl    = {https://dblp.org/rec/conf/tphol/Hurd02.bib},
  doi       = {10.1007/3-540-45685-6\_{1}{6}},
  url       = {https://doi.org/10.1007/3-540-45685-6_16},
}

@InProceedings{McIver2006,
  author    = {McIver, A. K. and Cohen, E. and Morgan, C. C.},
  booktitle = {Relations and Kleene Algebra in Computer Science},
  title     = {{Using Probabilistic Kleene Algebra for Protocol Verification}},
  year      = {2006},
  address   = {Berlin, Heidelberg},
  editor    = {Schmidt, Renate A.},
  pages     = {296--310},
  publisher = {Springer Berlin Heidelberg},
  abstract  = {We describe pKA, a probabilistic Kleene-style algebra, based on a well known model of probabilistic/demonic computation [3,16,10]. Our technical aim is to express probabilistic versions of Cohen's separation theorems.},
  isbn      = {978-3-540-37874-7},
}

@InProceedings{Cohen2000,
  author    = {Ernie Cohen},
  booktitle = {Mathematics of Program Construction, 5th International Conference, {MPC} 2000, Ponte de Lima, Portugal, July 3-5, 2000, Proceedings},
  title     = {{Separation and Reduction}},
  year      = {2000},
  editor    = {Roland Carl Backhouse and Jos{\'{e}} Nuno Oliveira},
  pages     = {45--59},
  publisher = {Springer},
  series    = {Lecture Notes in Computer Science},
  volume    = {1837},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  biburl    = {https://dblp.org/rec/conf/mpc/Cohen00.bib},
  doi       = {10.1007/10722010\_4},
  url       = {https://doi.org/10.1007/10722010_4},
}

@Article{Jifeng1997,
  author   = {He Jifeng and K. Seidel and A. McIver},
  journal  = {Science of Computer Programming},
  title    = {{Probabilistic models for the guarded command language}},
  year     = {1997},
  issn     = {0167-6423},
  note     = {Formal Specifications: Foundations, Methods, Tools and Applications},
  number   = {2},
  pages    = {171-192},
  volume   = {28},
  abstract = {The two models presented in this paper provide two different semantics for an extension of Dijkstra's language of guarded commands. The extended language has an additional operator, namely probabilistic choice, which makes it possible to express randomized algorithms. An earlier model by Claire Jones included probabilistic choice but not non-determinism, which meant that it could not be used for the development of algorithms from specifications. Our second model is built on top of Claire Jones' model, using a general method of extending a probabilistic cpo to one which also contains non-determinism. The first model was constructed from scratch, as it were, guided only by the desire for certain algebraic properties of the language constructs, which we found lacking in the second model. We compare and contrast the properties of the two models both by giving examples and by constructing mappings between them and the non-probabilistic model. On the basis of this comparison we argue that, in general, the first model is preferable to the second.},
  doi      = {https://doi.org/10.1016/S0167-6423(96)00019-6},
  keywords = {Probabilistic programming language, Semantics, Algebraic laws},
  url      = {https://www.sciencedirect.com/science/article/pii/S0167642396000196},
}

@InProceedings{Cock2012,
  author    = {David Cock},
  booktitle = {Proceedings Seventh Conference on Systems Software Verification, {SSV} 2012, Sydney, Australia, 28-30 November 2012},
  title     = {{Verifying Probabilistic Correctness in Isabelle with pGCL}},
  year      = {2012},
  editor    = {Franck Cassez and Ralf Huuck and Gerwin Klein and Bastian Schlich},
  pages     = {167--178},
  series    = {{EPTCS}},
  volume    = {102},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  biburl    = {https://dblp.org/rec/journals/corr/abs-1211-6197.bib},
  doi       = {10.4204/EPTCS.102.15},
}

@Book{Gordon1993,
  editor    = {M. J. C. Gordon and T. F. Melham},
  publisher = {Cambridge University Press},
  title     = {Introduction to {HOL}: A theorem proving environment for higher order logic},
  year      = {1993},
  isbn      = {0-521-44189-7},
  url       = {http://www.cs.ox.ac.uk/tom.melham/pub/Gordon-1993-ITH.html},
}

@Article{Morgan1996,
  author    = {Morgan, Carroll and McIver, Annabelle and Seidel, Karen},
  journal   = {ACM Transactions on Programming Languages and Systems (TOPLAS)},
  title     = {{Probabilistic predicate transformers}},
  year      = {1996},
  number    = {3},
  pages     = {325--353},
  volume    = {18},
  groups    = {Semantics of Probabilistic programs},
  owner     = {ykf_2001},
  publisher = {ACM},
  timestamp = {2019.08.02},
}

@Article{Audebaud2009,
  author    = {Philippe Audebaud and Christine Paulin{-}Mohring},
  journal   = {Sci. Comput. Program.},
  title     = {{Proofs of randomized algorithms in Coq}},
  year      = {2009},
  number    = {8},
  pages     = {568--589},
  volume    = {74},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  biburl    = {https://dblp.org/rec/journals/scp/AudebaudP09.bib},
  doi       = {10.1016/j.scico.2007.09.002},
  owner     = {ykf_2001},
  timestamp = {2021.06.01},
}

@Misc{coq,
  author       = {{The Coq development team}},
  howpublished = {\url{coq.inria.fr}},
  note         = {{Accessed: 2021-05-20}},
  title        = {{The Coq Proof Assistant}},
}

@Article{Gretz2014,
  author   = {Friedrich Gretz and Joost-Pieter Katoen and Annabelle McIver},
  journal  = {Performance Evaluation},
  title    = {{Operational versus weakest pre-expectation semantics for the probabilistic guarded command language}},
  year     = {2014},
  issn     = {0166-5316},
  note     = {Special Issue on the 9th International Conference on Quantitative Evaluation of Systems},
  pages    = {110-132},
  volume   = {73},
  abstract = {This paper proposes a simple operational semantics of pGCL, Dijkstra’s guarded command language extended with probabilistic choice, and relates this to pGCL’s wp-semantics by McIver and Morgan. Parametric Markov decision processes whose state rewards depend on the post-expectation at hand are used as the operational model. We show that the weakest pre-expectation of a pGCL-program w.r.t. a post-expectation corresponds to the expected cumulative reward to reach a terminal state in the parametric MDP associated to the program. In a similar way, we show a correspondence between weakest liberal pre-expectations and liberal expected cumulative rewards. The verification of probabilistic programs using wp-semantics and operational semantics is illustrated using a simple running example.},
  doi      = {https://doi.org/10.1016/j.peva.2013.11.004},
  keywords = {Expectation transformer semantics, Operational semantics, Markov decision process, Expected rewards},
  url      = {https://www.sciencedirect.com/science/article/pii/S0166531613001429},
}

@InProceedings{Rand2015,
  author    = {Robert Rand and Steve Zdancewic},
  booktitle = {The 31st Conference on the Mathematical Foundations of Programming Semantics, {MFPS} 2015, Nijmegen, The Netherlands, June 22-25, 2015},
  title     = {{VPHL:} {A} Verified Partial-Correctness Logic for Probabilistic Programs},
  year      = {2015},
  editor    = {Dan R. Ghica},
  pages     = {351--367},
  publisher = {Elsevier},
  series    = {Electronic Notes in Theoretical Computer Science},
  volume    = {319},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  biburl    = {https://dblp.org/rec/journals/entcs/RandZ15.bib},
  doi       = {10.1016/j.entcs.2015.12.021},
}

@PhdThesis{Ramshaw1979,
  author    = {Ramshaw, Lyle Harold},
  title     = {Formalizing the Analysis of Algorithms.},
  year      = {1979},
  address   = {Stanford, CA, USA},
  note      = {AAI8001994},
  publisher = {Stanford University},
}

@Article{denHartog2002,
  author    = {{den Hartog}, J.I. and {De Vink}, E.P.},
  journal   = {International journal of foundations of computer science},
  title     = {{Verifying Probabilistic Programs Using a Hoare like Logic}},
  year      = {2002},
  issn      = {0129-0541},
  month     = jun,
  note      = {Imported from DIES},
  number    = {3},
  pages     = {315--340},
  volume    = {13},
  abstract  = {Probability, be it inherent or explicitly introduced, has become an important issue in the verification of many programs. We study a formalism which allows reasoning about programs which can act probabilistically. To describe probabilistic programs a basic programming language with an operator for probabilistic choice is introduced and a denotational semantics is given for this language. To specify properties of probabilistic programs, standard first order logic predicates are insufficient, so a notion of probabilistic predicates are introduced. A Hoare-style proof system to check properties of probabilistic programs is given. The proof system for a sublanguage is shown to be correct and complete; the properties that can be derived are exactly the valid properties. Finally some typical examples illustrate the use of the probabilistic predicates and the proof system.},
  doi       = {10.1142/S012905410200114X},
  keywords  = {IR-55799, EWI-882},
  language  = {English},
  publisher = {World Scientific Publishing Co. Pte Ltd},
}

@Article{Chadha2007,
  author    = {Rohit Chadha and Lu{\'{\i}}s Cruz{-}Filipe and Paulo Mateus and Am{\'{\i}}lcar Sernadas},
  journal   = {Theor. Comput. Sci.},
  title     = {{Reasoning about probabilistic sequential programs}},
  year      = {2007},
  number    = {1-2},
  pages     = {142--165},
  volume    = {379},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  biburl    = {https://dblp.org/rec/journals/tcs/ChadhaCMS07.bib},
  doi       = {10.1016/j.tcs.2007.02.040},
}

@Article{Kaminski2019,
  author    = {Benjamin Lucien Kaminski and Joost{-}Pieter Katoen and Christoph Matheja},
  journal   = {Acta Informatica},
  title     = {On the hardness of analyzing probabilistic programs},
  year      = {2019},
  number    = {3},
  pages     = {255--285},
  volume    = {56},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  biburl    = {https://dblp.org/rec/journals/acta/KaminskiKM19.bib},
  doi       = {10.1007/s00236-018-0321-1},
}

@Article{McIver2017,
  author     = {McIver, Annabelle and Morgan, Carroll and Kaminski, Benjamin Lucien and Katoen, Joost-Pieter},
  journal    = {Proc. ACM Program. Lang.},
  title      = {{A New Proof Rule for Almost-Sure Termination}},
  year       = {2017},
  month      = {dec},
  number     = {POPL},
  volume     = {2},
  abstract   = {We present a new proof rule for proving almost-sure termination of probabilistic programs, including those that contain demonic non-determinism. An important question for a probabilistic program is whether the probability mass of all its diverging runs is zero, that is that it terminates "almost surely". Proving that can be hard, and this paper presents a new method for doing so. It applies directly to the program's source code, even if the program contains demonic choice. Like others, we use variant functions (a.k.a. "super-martingales") that are real-valued and decrease randomly on each loop iteration; but our key innovation is that the amount as well as the probability of the decrease are parametric. We prove the soundness of the new rule, indicate where its applicability goes beyond existing rules, and explain its connection to classical results on denumerable (non-demonic) Markov chains.},
  address    = {New York, NY, USA},
  articleno  = {33},
  doi        = {10.1145/3158121},
  issue_date = {January 2018},
  keywords   = {Almost-sure termination, program logic pGCL, demonic non-determinism},
  numpages   = {28},
  publisher  = {Association for Computing Machinery},
  url        = {https://doi.org/10.1145/3158121},
}

@InProceedings{Esparza2012,
  author    = {Javier Esparza and Andreas Gaiser and Stefan Kiefer},
  booktitle = {Computer Aided Verification - 24th International Conference, {CAV} 2012, Berkeley, CA, USA, July 7-13, 2012 Proceedings},
  title     = {{Proving Termination of Probabilistic Programs Using Patterns}},
  year      = {2012},
  editor    = {P. Madhusudan and Sanjit A. Seshia},
  pages     = {123--138},
  publisher = {Springer},
  series    = {Lecture Notes in Computer Science},
  volume    = {7358},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  biburl    = {https://dblp.org/rec/conf/cav/EsparzaGK12.bib},
  doi       = {10.1007/978-3-642-31424-7\_{1}{4}},
  url       = {https://doi.org/10.1007/978-3-642-31424-7_14},
}

@InProceedings{Kaminski2015,
  author    = {Benjamin Lucien Kaminski and Joost{-}Pieter Katoen},
  booktitle = {Mathematical Foundations of Computer Science 2015 - 40th International Symposium, {MFCS} 2015, Milan, Italy, August 24-28, 2015, Proceedings, Part {I}},
  title     = {{On the Hardness of Almost-Sure Termination}},
  year      = {2015},
  editor    = {Giuseppe F. Italiano and Giovanni Pighizzini and Donald Sannella},
  pages     = {307--318},
  publisher = {Springer},
  series    = {Lecture Notes in Computer Science},
  volume    = {9234},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  biburl    = {https://dblp.org/rec/conf/mfcs/KaminskiK15.bib},
  doi       = {10.1007/978-3-662-48057-1\_{2}{4}},
  url       = {https://doi.org/10.1007/978-3-662-48057-1_24},
}

@PhdThesis{Kaminski2019a,
  author    = {Benjamin Lucien Kaminski},
  school    = {{RWTH} Aachen University, Germany},
  title     = {{Advanced weakest precondition calculi for probabilistic programs}},
  year      = {2019},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  biburl    = {https://dblp.org/rec/phd/dnb/Kaminski19.bib},
  url       = {http://publications.rwth-aachen.de/record/755408},
  urn       = {urn:nbn:de:101:1-2019072507004473397003},
}

@InProceedings{Huang2018,
  author    = {Mingzhang Huang and Hongfei Fu and Krishnendu Chatterjee},
  booktitle = {Programming Languages and Systems - 16th Asian Symposium, {APLAS} 2018, Wellington, New Zealand, December 2-6, 2018, Proceedings},
  title     = {{New Approaches for Almost-Sure Termination of Probabilistic Programs}},
  year      = {2018},
  editor    = {Sukyoung Ryu},
  pages     = {181--201},
  publisher = {Springer},
  series    = {Lecture Notes in Computer Science},
  volume    = {11275},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  biburl    = {https://dblp.org/rec/conf/aplas/HuangFC18.bib},
  doi       = {10.1007/978-3-030-02768-1\_{1}{1}},
  url       = {https://doi.org/10.1007/978-3-030-02768-1_11},
}

@InProceedings{Bournez2006,
  author    = {Olivier Bournez and Florent Garnier},
  booktitle = {Term Rewriting and Applications, 17th International Conference, {RTA} 2006, Seattle, WA, USA, August 12-14, 2006, Proceedings},
  title     = {{Proving Positive Almost Sure Termination Under Strategies}},
  year      = {2006},
  editor    = {Frank Pfenning},
  pages     = {357--371},
  publisher = {Springer},
  series    = {Lecture Notes in Computer Science},
  volume    = {4098},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  biburl    = {https://dblp.org/rec/conf/rta/BournezG06.bib},
  doi       = {10.1007/11805618\_{2}{7}},
  url       = {https://doi.org/10.1007/11805618_27},
}

@InProceedings{Chakarov2013,
  author    = {Aleksandar Chakarov and Sriram Sankaranarayanan},
  booktitle = {Computer Aided Verification - 25th International Conference, {CAV} 2013, Saint Petersburg, Russia, July 13-19, 2013. Proceedings},
  title     = {{Probabilistic Program Analysis with Martingales}},
  year      = {2013},
  editor    = {Natasha Sharygina and Helmut Veith},
  pages     = {511--526},
  publisher = {Springer},
  series    = {Lecture Notes in Computer Science},
  volume    = {8044},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  biburl    = {https://dblp.org/rec/conf/cav/ChakarovS13.bib},
  doi       = {10.1007/978-3-642-39799-8\_{3}{4}},
  url       = {https://doi.org/10.1007/978-3-642-39799-8_34},
}

@InProceedings{Chatterjee2017,
  author    = {Krishnendu Chatterjee and Petr Novotn{\'{y}} and Dorde Zikelic},
  booktitle = {Proceedings of the 44th {ACM} {SIGPLAN} Symposium on Principles of Programming Languages, {POPL} 2017, Paris, France, January 18-20, 2017},
  title     = {{Stochastic Invariants for Probabilistic Termination}},
  year      = {2017},
  editor    = {Giuseppe Castagna and Andrew D. Gordon},
  pages     = {145--160},
  publisher = {{ACM}},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  biburl    = {https://dblp.org/rec/conf/popl/ChatterjeeNZ17.bib},
  doi       = {10.1145/3009837.3009873},
}

@InProceedings{Fu2019,
  author    = {Hongfei Fu and Krishnendu Chatterjee},
  booktitle = {Verification, Model Checking, and Abstract Interpretation - 20th International Conference, {VMCAI} 2019, Cascais, Portugal, January 13-15, 2019, Proceedings},
  title     = {{Termination of Nondeterministic Probabilistic Programs}},
  year      = {2019},
  editor    = {Constantin Enea and Ruzica Piskac},
  pages     = {468--490},
  publisher = {Springer},
  series    = {Lecture Notes in Computer Science},
  volume    = {11388},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  biburl    = {https://dblp.org/rec/conf/vmcai/FuC19.bib},
  doi       = {10.1007/978-3-030-11245-5\_{2}{2}},
  url       = {https://doi.org/10.1007/978-3-030-11245-5_22},
}

@Article{Agrawal2017,
  author     = {Agrawal, Sheshansh and Chatterjee, Krishnendu and Novotn\'{y}, Petr},
  journal    = {Proc. ACM Program. Lang.},
  title      = {Lexicographic Ranking Supermartingales: An Efficient Approach to Termination of Probabilistic Programs},
  year       = {2017},
  month      = {dec},
  number     = {POPL},
  volume     = {2},
  abstract   = {Probabilistic programs extend classical imperative programs with real-valued random variables and random branching. The most basic liveness property for such programs is the termination property. The qualitative (aka almost-sure) termination problem asks whether a given program program terminates with probability 1. While ranking functions provide a sound and complete method for non-probabilistic programs, the extension of them to probabilistic programs is achieved via ranking supermartingales (RSMs). Although deep theoretical results have been established about RSMs, their application to probabilistic programs with nondeterminism has been limited only to programs of restricted control-flow structure. For non-probabilistic programs, lexicographic ranking functions provide a compositional and practical approach for termination analysis of real-world programs. In this work we introduce lexicographic RSMs and show that they present a sound method for almost-sure termination of probabilistic programs with nondeterminism. We show that lexicographic RSMs provide a tool for compositional reasoning about almost-sure termination, and for probabilistic programs with linear arithmetic they can be synthesized efficiently (in polynomial time). We also show that with additional restrictions even asymptotic bounds on expected termination time can be obtained through lexicographic RSMs. Finally, we present experimental results on benchmarks adapted from previous work to demonstrate the effectiveness of our approach.},
  address    = {New York, NY, USA},
  articleno  = {34},
  doi        = {10.1145/3158122},
  issue_date = {January 2018},
  keywords   = {probabilistic programs, termination, martingales, termination time},
  numpages   = {32},
  publisher  = {Association for Computing Machinery},
  url        = {https://doi.org/10.1145/3158122},
}

@InProceedings{Moosbrugger2021,
  author    = {Marcel Moosbrugger and Ezio Bartocci and Joost{-}Pieter Katoen and Laura Kov{\'{a}}cs},
  booktitle = {Formal Methods - 24th International Symposium, {FM} 2021, Virtual Event, November 20-26, 2021, Proceedings},
  title     = {{The Probabilistic Termination Tool Amber}},
  year      = {2021},
  editor    = {Marieke Huisman and Corina S. Pasareanu and Naijun Zhan},
  pages     = {667--675},
  publisher = {Springer},
  series    = {Lecture Notes in Computer Science},
  volume    = {13047},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  biburl    = {https://dblp.org/rec/conf/fm/MoosbruggerBKK21.bib},
  doi       = {10.1007/978-3-030-90870-6\_{3}{6}},
  url       = {https://doi.org/10.1007/978-3-030-90870-6_36},
}

@InProceedings{Chakarov2014,
  author    = {Chakarov, Aleksandar and Sankaranarayanan, Sriram},
  booktitle = {Static Analysis},
  title     = {{Expectation Invariants for Probabilistic Program Loops as Fixed Points}},
  year      = {2014},
  address   = {Cham},
  editor    = {M{\"u}ller-Olm, Markus and Seidl, Helmut},
  pages     = {85--100},
  publisher = {Springer International Publishing},
  abstract  = {We present static analyses for probabilistic loops using expectation invariants. Probabilistic loops are imperative while-loops augmented with calls to random variable generators. Whereas, traditional program analysis uses Floyd-Hoare style invariants to over-approximate the set of reachable states, our approach synthesizes invariant inequalities involving the expected values of program expressions at the loop head. We first define the notion of expectation invariants, and demonstrate their usefulness in analyzing probabilistic program loops. Next, we present the set of expectation invariants for a loop as a fixed point of the pre-expectation operator over sets of program expressions. Finally, we use existing concepts from abstract interpretation theory to present an iterative analysis that synthesizes expectation invariants for probabilistic program loops. We show how the standard polyhedral abstract domain can be used to synthesize expectation invariants for probabilistic programs, and demonstrate the usefulness of our approach on some examples of probabilistic program loops.},
  isbn      = {978-3-319-10936-7},
}

@InProceedings{Bournez2005,
  author    = {Bournez, Olivier and Garnier, Florent},
  booktitle = {Term Rewriting and Applications},
  title     = {Proving Positive Almost-Sure Termination},
  year      = {2005},
  address   = {Berlin, Heidelberg},
  editor    = {Giesl, J{\"u}rgen},
  pages     = {323--337},
  publisher = {Springer Berlin Heidelberg},
  abstract  = {In order to extend the modeling capabilities of rewriting systems, it is rather natural to consider that the firing of rules can be subject to some probabilistic laws. Considering rewrite rules subject to probabilities leads to numerous questions about the underlying notions and results.},
  isbn      = {978-3-540-32033-3},
}

@Article{Chatterjee2018,
  author     = {Chatterjee, Krishnendu and Fu, Hongfei and Novotn\'{y}, Petr and Hasheminezhad, Rouzbeh},
  journal    = {ACM Trans. Program. Lang. Syst.},
  title      = {{Algorithmic Analysis of Qualitative and Quantitative Termination Problems for Affine Probabilistic Programs}},
  year       = {2018},
  issn       = {0164-0925},
  month      = {may},
  number     = {2},
  volume     = {40},
  abstract   = {In this article, we consider the termination problem of probabilistic programs with real-valued variables. The questions concerned are: qualitative ones that ask (i) whether the program terminates with probability 1 (almost-sure termination) and (ii) whether the expected termination time is finite (finite termination); and quantitative ones that ask (i) to approximate the expected termination time (expectation problem) and (ii) to compute a bound B such that the probability not to terminate after B steps decreases exponentially (concentration problem). To solve these questions, we utilize the notion of ranking supermartingales, which is a powerful approach for proving termination of probabilistic programs. In detail, we focus on algorithmic synthesis of linear ranking-supermartingales over affine probabilistic programs (Apps) with both angelic and demonic non-determinism. An important subclass of Apps is LRApp which is defined as the class of all Apps over which a linear ranking-supermartingale exists.Our main contributions are as follows. Firstly, we show that the membership problem of LRApp (i) can be decided in polynomial time for Apps with at most demonic non-determinism, and (ii) is NP-hard and in PSPACE for Apps with angelic non-determinism. Moreover, the NP-hardness result holds already for Apps without probability and demonic non-determinism. Secondly, we show that the concentration problem over LRApp can be solved in the same complexity as for the membership problem of LRApp. Finally, we show that the expectation problem over LRApp can be solved in 2EXPTIME and is PSPACE-hard even for Apps without probability and non-determinism (i.e., deterministic programs). Our experimental results demonstrate the effectiveness of our approach to answer the qualitative and quantitative questions over Apps with at most demonic non-determinism.},
  address    = {New York, NY, USA},
  articleno  = {7},
  doi        = {10.1145/3174800},
  issue_date = {June 2018},
  keywords   = {Probabilistic programs, concentration, ranking supermartingale, termination},
  numpages   = {45},
  publisher  = {Association for Computing Machinery},
  url        = {https://doi.org/10.1145/3174800},
}

@InBook{Bakker1989,
  author    = {de Bakker, Jaco and Scott, D.},
  pages     = {1--30},
  publisher = {C},
  title     = {A theory of programs : an outline of joint work : IBM seminar Vienna, August 1969},
  year      = {1989},
  month     = jan,
  booktitle = {J.W. de Bakker, 25 jaar semantiek},
}

@InProceedings{Dehnert2017,
  author    = {Dehnert, Christian and Junges, Sebastian and Katoen, Joost-Pieter and Volk, Matthias},
  booktitle = {Computer Aided Verification},
  title     = {A Storm is Coming: A Modern Probabilistic Model Checker},
  year      = {2017},
  address   = {Cham},
  editor    = {Majumdar, Rupak and Kun{\v{c}}ak, Viktor},
  pages     = {592--600},
  publisher = {Springer International Publishing},
  abstract  = {We launch the new probabilistic model checker Storm. It features the analysis of discrete- and continuous-time variants of both Markov chains and MDPs. It supports the Prism and JANI modeling languages, probabilistic programs, dynamic fault trees and generalized stochastic Petri nets. It has a modular set-up in which solvers and symbolic engines can easily be exchanged. It offers a Python API for rapid prototyping by encapsulating Storm's fast and scalable algorithms. Experiments on a variety of benchmarks show its competitive performance.},
  isbn      = {978-3-319-63390-9},
}

@InProceedings{Foster2016,
  author    = {Simon Foster and Frank Zeyda and Jim Woodcock},
  booktitle = {Theoretical Aspects of Computing - {ICTAC} 2016 - 13th International Colloquium, Taipei, Taiwan, ROC, October 24-31, 2016, Proceedings},
  title     = {{Unifying Heterogeneous State-Spaces with Lenses}},
  year      = {2016},
  editor    = {Augusto Sampaio and Farn Wang},
  pages     = {295--314},
  series    = {Lecture Notes in Computer Science},
  volume    = {9965},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  biburl    = {https://dblp.org/rec/conf/ictac/FosterZW16.bib},
  doi       = {10.1007/978-3-319-46750-4\_{1}{7}},
  url       = {https://doi.org/10.1007/978-3-319-46750-4_17},
}

@PhdThesis{Foster2009,
  author = {Foster, John Nathan},
  school = {University of Pennsylvania},
  title  = {{Bidirectional programming languages}},
  year   = {2009},
}

@Article{Knuth1992,
  author    = {Donald E. Knuth},
  journal   = {The American Mathematical Monthly},
  title     = {{Two Notes on Notation}},
  year      = {1992},
  issn      = {00029890, 19300972},
  number    = {5},
  pages     = {403--422},
  volume    = {99},
  publisher = {Mathematical Association of America},
  url       = {http://www.jstor.org/stable/2325085},
  urldate   = {2023-01-23},
}

@InProceedings{Hoelzl2013,
  author    = {H{\"o}lzl, Johannes and Immler, Fabian and Huffman, Brian},
  booktitle = {Interactive Theorem Proving},
  title     = {{Type Classes and Filters for Mathematical Analysis in Isabelle/HOL}},
  year      = {2013},
  address   = {Berlin, Heidelberg},
  editor    = {Blazy, Sandrine and Paulin-Mohring, Christine and Pichardie, David},
  pages     = {279--294},
  publisher = {Springer Berlin Heidelberg},
  abstract  = {The theory of analysis in Isabelle/HOL derives from earlier formalizations that were limited to specific concrete types: ℝ, ℂ and ℝn. Isabelle's new analysis theory unifies and generalizes these earlier efforts. The improvements are centered on two primary contributions: a generic theory of limits based on filters, and a new hierarchy of type classes that includes various topological, metric, vector, and algebraic spaces. These let us apply many results in multivariate analysis to types which are not Euclidean spaces, such as the extended real numbers, bounded continuous functions, or finite maps.},
  isbn      = {978-3-642-39634-2},
}

@InBook{Abramsky1995,
  author    = {Abramsky, Samson and Jung, Achim},
  pages     = {1–168},
  publisher = {Oxford University Press, Inc.},
  title     = {{Domain Theory}},
  year      = {1995},
  address   = {USA},
  isbn      = {019853762X},
  booktitle = {Handbook of Logic in Computer Science (Vol. 3): Semantic Structures},
  numpages  = {168},
}

@Misc{Wikipedia2023,
  author       = {Wikipedia},
  howpublished = {\url{http://en.wikipedia.org/w/index.php?title=Monty\%20Hall\%20problem&oldid=1137277370}},
  note         = {[Online; accessed 09-February-2023]},
  title        = {{Monty Hall problem} --- {W}ikipedia{,} The Free Encyclopedia},
  year         = {2023},
}

@Article{Cousot1979,
  author  = {Cousot, P{.} and Cousot, R{.}},
  journal = {Pacific Journal of Mathematics},
  title   = {Constructive Versions of {T}arski's Fixed Point Theorems},
  year    = {1979},
  number  = {1},
  pages   = {43--57},
  volume  = {81},
}

@InBook{Lopez2004,
  author    = {L{\'o}pez, Natalia and N{\'u}{\~{n}}ez, Manuel},
  editor    = {Baier, Christel and Haverkort, Boudewijn R. and Hermanns, Holger and Katoen, Joost-Pieter and Siegle, Markus},
  pages     = {89--123},
  publisher = {Springer Berlin Heidelberg},
  title     = {An Overview of Probabilistic Process Algebras and Their Equivalences},
  year      = {2004},
  address   = {Berlin, Heidelberg},
  isbn      = {978-3-540-24611-4},
  abstract  = {In order to describe probabilistic processes by means of a formal model, some considerations have to be taken into account. In this paper we present some of the ideas appeared in the literature that could help to define appropriate formal frameworks for the specification of probabilistic processes. First, we will explain the different interpretations of the probabilistic information included in this kind of models. After that, the different choice operators used in the most common probabilistic languages are enumerated. Once we have an appropriate language, we have to give its semantics. Thus, we will review some of the theories based on bisimulation and testing semantics. We will conclude by studying the extensions of the chosen languages with other operators such as parallel composition and hiding.},
  booktitle = {Validation of Stochastic Systems: A Guide to Current Research},
  doi       = {10.1007/978-3-540-24611-4_3},
  url       = {https://doi.org/10.1007/978-3-540-24611-4_3},
}

@InProceedings{Georgievska2012,
  author    = {Georgievska, Sonja and Andova, Suzana},
  booktitle = {Measurement, Modelling, and Evaluation of Computing Systems and Dependability and Fault Tolerance},
  title     = {{Probabilistic CSP: Preserving the Laws via Restricted Schedulers}},
  year      = {2012},
  address   = {Berlin, Heidelberg},
  editor    = {Schmitt, Jens B.},
  pages     = {136--150},
  publisher = {Springer Berlin Heidelberg},
  abstract  = {Extending Communicating Sequential Processes (CSP) by preserving the distributivity laws for internal choice, in the presence of probabilistic choice, has been an open problem so far. The problem stems from a well known disagreement between probabilistic choice and nondeterministic choice, that raises congruence issues for parallel composition. Recently, it has been argued that the congruence issue can be resolved only by restricting the power of the schedulers that resolve the nondeterminism. In our previous work, we have restricted the schedulers by suitably labeling the nondeterministic transitions. We have defined a ready-trace equivalence and a parallel composition with hiding for which the equivalence is a congruence. In this paper, we generalize our model and give a CSP-style axiomatic characterization of the ready-trace equivalence. From the axiomatization it follows that all distributivity axioms for internal choice from CSP are preserved, and no new axioms are added.},
  isbn      = {978-3-642-28540-0},
}

@InBook{Morgan2005,
  author    = {Morgan, Carroll},
  editor    = {Abdallah, Ali E. and Jones, Cliff B. and Sanders, Jeff W.},
  pages     = {220--241},
  publisher = {Springer Berlin Heidelberg},
  title     = {Of Probabilistic wp and CSP---and Compositionality},
  year      = {2005},
  address   = {Berlin, Heidelberg},
  isbn      = {978-3-540-32265-8},
  abstract  = {We connect probabilistic Action Systems and probabilistic CSP, inducing healthiness conditions for the probabilistic traces, failures and divergences of the latter.},
  booktitle = {Communicating Sequential Processes. The First 25 Years: Symposium on the Occasion of 25 Years of CSP, London, UK, July 7-8, 2004. Revised Invited Papers},
  doi       = {10.1007/11423348_12},
  url       = {https://doi.org/10.1007/11423348_12},
}

@InProceedings{Gomez1997,
  author    = {G{\'o}mez, F. Cuartero and de Frutos Escrig, D. and Ruiz, V. Valero},
  booktitle = {Transformation-Based Reactive Systems Development},
  title     = {A sound and complete proof system for probabilistic processes},
  year      = {1997},
  address   = {Berlin, Heidelberg},
  editor    = {Bertran, Miquel and Rus, Teodor},
  pages     = {340--352},
  publisher = {Springer Berlin Heidelberg},
  abstract  = {In this paper we present a process algebra model of probabilistic communicating processes based on classical CSP. To define our model we have replaced internal non-determinism by generative probabilistic choices, and external non-determinism by reactive probabilistic choices, with the purpose of maintaining the meaning of the classical CSP operators, once generalized in a probabilistic way. Thus we try to keep valid, as far as possible, the laws of CSP. This combination of both internal and external choice makes strongly difficult the definition of a probabilistic version of CSP. In fact, we can find in the current literature quite a number of papers on probabilistic processes, but only in a few of them internal and external choices are combined, trying to preserve their original meaning.},
  isbn      = {978-3-540-69058-0},
}

@Article{Morgan1996a,
  author     = {Morgan, Carroll and McIver, Annabelle and Seidel, Karen and Sanders, J. W.},
  journal    = {Form. Asp. Comput.},
  title      = {Refinement-Oriented Probability for CSP},
  year       = {1996},
  issn       = {0934-5043},
  month      = {nov},
  number     = {6},
  pages      = {617–647},
  volume     = {8},
  abstract   = {Jones and Plotkin give a general construction for forming a probabilistic powerdomain over any directed-complete partial order [Jon90, JoP89]. We apply their technique to the failures/divergences semantic model for Communicating Sequential Processes [Hoa85].The resulting probabilistic model supports a new binary operator, probabilistic choice, and retains all operators of CSP including its two existing forms of choice. An advantage of using the general construction is that it is easy to see which CSP identities remain true in the probabilistic model. A surprising consequence however is that probabilistic choice distributes through all other operators; such algebraic mobility means that the syntactic position of the choice operator gives little information about when the choice actually must occur. That in turn leads to some interesting interaction between probability and nondeterminism.A simple communications protocol is used to illustrate the probabilistic algebra, and several suggestions are made for accommodating and controlling nondeterminism when probability is present.},
  address    = {Berlin, Heidelberg},
  doi        = {10.1007/BF01213492},
  issue_date = {Nov 1996},
  keywords   = {Refinement, Probability, Concurrency, CSP, Nondeterminism},
  numpages   = {31},
  publisher  = {Springer-Verlag},
  url        = {https://doi.org/10.1007/BF01213492},
}

@Article{Vanglabbeek1995,
  author   = {R.J. Vanglabbeek and S.A. Smolka and B. Steffen},
  journal  = {Information and Computation},
  title    = {Reactive, Generative, and Stratified Models of Probabilistic Processes},
  year     = {1995},
  issn     = {0890-5401},
  number   = {1},
  pages    = {59-80},
  volume   = {121},
  abstract = {We introduce three models of probabilistic processes, namely, reactive, generative, and stratified. These models are investigated within the context of PCCS, an extension of Milner′s SCCS in which each summand of a process summation expression is guarded by a probability and the sum of these probabilities is 1. For each model, we present a structural operational semantics of PCCS and a notion of bisimulation equivalence which we prove to be a congruence. We also show that the models form a hierarchy: the reactive model is derivable from the generative model by abstraction from the relative probabilities of different actions, and the generative model is derivable from the stratified model by abstraction from the purely probabilistic branching structure. Moreover, the classical nonprobabilistic model is derivable from each of these models by abstraction from all probabilities.},
  doi      = {https://doi.org/10.1006/inco.1995.1123},
  url      = {https://www.sciencedirect.com/science/article/pii/S0890540185711236},
}

@Article{Larsen1991,
  author    = {Kim Guldstrand Larsen and Arne Skou},
  journal   = {Inf. Comput.},
  title     = {Bisimulation through Probabilistic Testing},
  year      = {1991},
  number    = {1},
  pages     = {1--28},
  volume    = {94},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  biburl    = {https://dblp.org/rec/journals/iandc/LarsenS91.bib},
  doi       = {10.1016/0890-5401(91)90030-6},
}

@Article{Norman2013,
  author    = {Gethin Norman and David Parker and Jeremy Sproston},
  journal   = {Formal Methods in System Design},
  title     = {Model Checking for Probabilistic Timed Automata},
  year      = {2013},
  number    = {2},
  pages     = {164--190},
  volume    = {43},
  publisher = {Springer},
}

@InProceedings{Giacalone1990,
  author    = {Alessandro Giacalone and Chi-Chang Jou and Scott A. Smolka},
  booktitle = {Programming Concepts and Methods},
  title     = {Algebraic Reasoning for Probabilistic Concurrent Systems},
  year      = {1990},
}

@InProceedings{Larsen1989,
  author    = {Larsen, K. G. and Skou, A.},
  booktitle = {Proceedings of the 16th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages},
  title     = {Bisimulation through Probabilistic Testing (Preliminary Report)},
  year      = {1989},
  address   = {New York, NY, USA},
  pages     = {344–352},
  publisher = {Association for Computing Machinery},
  series    = {POPL '89},
  abstract  = {We propose a language for testing concurrent processes and examine its strength in terms of the processes that are distinguished by a test. By using probabilistic transition systems as the underlying semantic model, we show how a testing algorithm with a probability arbitrary close to 1 can distinguish processes that are not bisimulation equivalent. We also show a similar result (in a slightly stronger form) for a new process relation called 2/3-bisimulation — lying strictly between that of simulation and bisimulation. Finally, the ultimately strength of the testing language is shown to identify an even stronger process relation, called probabilistic bisimulation.},
  doi       = {10.1145/75277.75307},
  isbn      = {0897912942},
  location  = {Austin, Texas, USA},
  numpages  = {9},
  url       = {https://doi.org/10.1145/75277.75307},
}

@InProceedings{Bloom1989,
  author    = {Bloom, Bard and Meyer, Albert R.},
  booktitle = {Logic at Botik '89},
  title     = {A remark on bisimulation between probabilistic processes},
  year      = {1989},
  address   = {Berlin, Heidelberg},
  editor    = {Meyer, Albert R. and Taitslin, Michael A.},
  pages     = {26--40},
  publisher = {Springer Berlin Heidelberg},
  abstract  = {Larsen and Skou have recently demonstrated that the notion of bisimulation---which Milner introduced as a fundamental equivalence on concurrent processes---arises in a natural way as an ``experimental'' equivalence on probabilistic processes. In this paper we further clarify how bisimulation arises in this probabilistic setting: the transitions of two labelled transition systems can be assigned weights so that the trees are indistinguishable by a very general kind of probabilistic experiment iff the trees are bisimilar. However, we exhibit a pair of computable, bisimilar systems which are experimentally distinguishable for any computable weighting of their transitions.},
  isbn      = {978-3-540-46180-7},
}

@InProceedings{Yi1992,
  author    = {Yi, Wang and Larsen, Kim Guldstrand},
  booktitle = {Proceedings of the IFIP TC6/WG6.1 Twelth International Symposium on Protocol Specification, Testing and Verification XII},
  title     = {Testing Probabilistic and Nondeterministic Processes},
  year      = {1992},
  address   = {NLD},
  pages     = {47–61},
  publisher = {North-Holland Publishing Co.},
  isbn      = {0444898743},
  numpages  = {15},
}

@PhdThesis{Andova2002,
  author    = {S. Andova},
  school    = {Mathematics and Computer Science},
  title     = {Probabilistic process algebra},
  year      = {2002},
  abstract  = {Every day we witness the fast development of the hardware and software technology. This, of course, is the reason that new and more complex systems controlled by some kind of computational-based devices become an unseparated part of our daily life. As more as the system complexity increases, as more the reasoning about its correct behaviour becomes dif??cult. A variety of consequences may occur as a result of a failure, ranging from simple annoying to life threatening ones. Thus for some systems it is crucial that they exhibit a correct functioning. However, for systems with an extremely complex construction it is almost impossible to give an absolute guarantee for their correctness. In this case, it is still satisfactory to know that the possibility for a system to fail is low enough. Formal methods have been developed for establishing correctness of computer systems. They provide rigorous methods with which one can formally specify properties of a systems's intended behaviour, and also can check if the system conforms to that speci??cation. In case of complex systems we need a formal method that allows us to reason in compositional way, it provides us with techniques that can be used to build larger systems from the composition of smaller ones. Process algebra carries exactly this idea; it provides operators that allow to compose processes in order to obtain a more complex process. Besides, every process algebra contains a set of axioms. Every axiom is an algebraic equation that carries our intuition and insight in process behaviour, it expresses which two processes behaviour we consider equal. In such a way, manipulation with processes becomes manipulation with equations in the algebraic sense. But, equations and operators do not have any meaning unless we place them in a certain real ¿world¿ and match the terms of the process algebra with the entities of the real world. This step is traditionally called ¿giving a semantic of the syntax¿. The structure constructed in this way is called a model of the considered process algebra. For every given process algebra we can construct an in??nite number of models, but only several of them are interesting for the purpose process algebra was developed as a formal method. However, there is a tendency always to use so-called a bisimulation model. In this thesis we propose several process algebras and construct their models based on the notion of bisimulation.},
  doi       = {10.6100/IR561343},
  isbn      = {90-386-0592-7},
  language  = {English},
  publisher = {Technische Universiteit Eindhoven},
}

@InCollection{Jonsson2001,
  author    = {Bengt Jonsson and Wang Yi and Kim G. Larsen},
  booktitle = {Handbook of Process Algebra},
  publisher = {Elsevier Science},
  title     = {CHAPTER 11 - Probabilistic Extensions of Process Algebras**This chapter is dedicated to the fond memory of Linda Christoff.},
  year      = {2001},
  address   = {Amsterdam},
  editor    = {J.A. Bergstra and A. Ponse and S.A. Smolka},
  isbn      = {978-0-444-82830-9},
  pages     = {685-710},
  abstract  = {Abstract
In this chapter, we adopt Probabilistic Transition Systems as a basic model for probabilistic processes, in which probabilistic and nondeterministic choices are independent concepts. The model is essentially a nondeterministic version of Markov decision processes or probabilistic automata of Rabin. We develop a general framework to define probabilistic process languages to describe probabilistic transition systems. In particular, we show how operators for nonprobabilistic process algebras can be lifted to probabilistic process algebras in a uniform way similar to de Simone format. To establish a notion of refinement, we present a family of preorders including probabilistic bisimulation and simulation, and probabilistic testing pre-orders as well as their logical or denotational characterization. These preorders are shown to be precongruences with respect to the algebraic operators that can be defined in our general framework. Finally, we give a short account of the important work on extending the successful field of model checking to probabilistic settings and a brief discussion on current research in the area.},
  doi       = {https://doi.org/10.1016/B978-044482830-9/50029-1},
  url       = {https://www.sciencedirect.com/science/article/pii/B9780444828309500291},
}

@InProceedings{Hansson1990,
  author    = {Hansson, H. and Jonsson, B.},
  booktitle = {[1990] Proceedings 11th Real-Time Systems Symposium},
  title     = {A calculus for communicating systems with time and probabilities},
  year      = {1990},
  pages     = {278-287},
  doi       = {10.1109/REAL.1990.128759},
}

@InProceedings{Nunez1995,
  author    = {N{\'u}{\~{n}}ez, Manuel and de Frutos, David and Llana, Luis},
  booktitle = {CONCUR '95: Concurrency Theory},
  title     = {Acceptance trees for probabilistic processes},
  year      = {1995},
  address   = {Berlin, Heidelberg},
  editor    = {Lee, Insup and Smolka, Scott A.},
  pages     = {249--263},
  publisher = {Springer Berlin Heidelberg},
  abstract  = {In this paper we study the extension of classical testing theory to a probabilistic process algebra. We consider a generative interpretation of probabilities for a language with two choice operators (one internal and the other external), which are annotated with a probability p $\epsilon$ (0, 1). We define a testing semantics for our language, and we write P passpT to denote that the process P passes the test T with a probability p. We also give a set of essential tests which has the same strength as the full family of tests.Next we give an alternative characterization of the testing semantics, based on the idea of acceptance sets, and we prove that the new equivalence is equal to the testing equivalence. Finally, we present a fully abstract denotational semantics based on acceptance trees.},
  isbn      = {978-3-540-44738-2},
}

@Article{Kwiatkowska1998,
  author   = {Marta Kwiatkowska and Gethin Norman},
  journal  = {Electronic Notes in Theoretical Computer Science},
  title    = {A Fully Abstract Metric-Space Denotational Semantics for Reactive Probabilistic Processes},
  year     = {1998},
  issn     = {1571-0661},
  note     = {Comprox III, Third Workshop on Computation and Approximation},
  pages    = {182},
  volume   = {13},
  abstract = {We consider the calculus of Communicating Sequential Processes (CSP) extended with action-guarded probabilistic choice and provide it with an operational semantics in terms of a suitable extension of Larsen and Skou's reactive probabilistic transition systems. We show that a testing equivalence which identifies two processes if they pass all tests with the same probability is a congruence for a subcalculus of CSP including external and internal choice and the synchronous parallel. Using the methodology of de Bakker and Zucker, introduced for classical process calculi, we derive a metric-space semantic model for the calculus and show it is fully abstract.},
  doi      = {https://doi.org/10.1016/S1571-0661(05)80222-1},
  url      = {https://www.sciencedirect.com/science/article/pii/S1571066105802221},
}

@Article{Cazorla2003,
  author   = {Diego Cazorla and Fernando Cuartero and Valentín Valero and Fernando L. Pelayo and J.José Pardo},
  journal  = {The Journal of Logic and Algebraic Programming},
  title    = {Algebraic theory of probabilistic and nondeterministic processes},
  year     = {2003},
  issn     = {1567-8326},
  number   = {1},
  pages    = {57-103},
  volume   = {55},
  abstract = {This paper introduces a general framework of probabilistic and nondeterministic recursive processes that considers three complementary views of the semantics of concurrent processes: behavioural (testing semantics), denotational and axiomatic. The process algebra we present, PNAL, is a full probabilistic extension of EPL (Algebraic Theory of Processes, M. Hennessy) that maintains nondeterminism. This language allows us to consider both qualitative and quantitative aspects of concurrent systems, which are important in order to obtain more realistic models.},
  doi      = {https://doi.org/10.1016/S1567-8326(02)00040-1},
  keywords = {Process algebra, Probabilistic and nondeterministic processes, Testing semantics, Denotational semantics, Proof system},
  url      = {https://www.sciencedirect.com/science/article/pii/S1567832602000401},
}

@Article{Seidel1995,
  author   = {Karen Seidel},
  journal  = {Theoretical Computer Science},
  title    = {Probabilistic communicating processes},
  year     = {1995},
  issn     = {0304-3975},
  number   = {2},
  pages    = {219-249},
  volume   = {152},
  abstract = {We explore the suitability of two semantic spaces as a basis for a probabilistic variant of the language of Communicating Sequential Processes (CSP), so as to provide a formalism for the specification and proof of correctness of probabilistic algorithms. The two spaces give rise to two sublanguages, each of which is characterised by an algebraic axiomatisation which is shown to be sound and complete for finite processes. In the first semantics, processes are defined as probability measures on the space of infinite traces and operators are defined as functions (mostly transformations) of probability measures. The advantage of this semantics is that it is simple and good for reasoning about probabilistic properties such as self-stabilisation or fairness of random algorithms. The disadvantage is that neither external choice nor parallel composition other than fully synchronised parallel composition can be defined in this semantics. This problem is solved in the second model which is based on the space of conditional probability measures of infinite traces. This model leads to a set of proof rules for the deterministic properties of probabilistic algorithms, but it is more difficult to use in the analysis of probabilistic properties. The last part of the paper shows how the two models are related and how this can be exploited to combine their advantages and get around their disadvantages. This is illustrated by the example of a self-stabilising tokenring.},
  doi      = {https://doi.org/10.1016/0304-3975(94)00286-0},
  url      = {https://www.sciencedirect.com/science/article/pii/0304397594002860},
}

@Article{Wu1997,
  author   = {Sue-hwey Wu and Scott A. Smolka and Eugene W. Stark},
  journal  = {Theoretical Computer Science},
  title    = {Composition and behaviors of probabilistic I/O automata},
  year     = {1997},
  issn     = {0304-3975},
  number   = {1},
  pages    = {1-38},
  volume   = {176},
  abstract = {We augment the I/O automaton model of Lynch and Tuttle with probability, as a step toward the ultimate goal of obtaining a useful tool for specifying and reasoning about asynchronous probabilistic systems. Our new model, called probabilistic I/O automata, preserves the fundamental properties of the I/O automaton model, such as the asymmetric treatment of input and output and the pleasant notion of asynchronous composition. For certain classes of probabilistic I/O automata, we show that probabilistic behavior maps, which are an abstract representation of I/O automaton behavior in terms of a certain expectation operator, are compositional and fully abstract with respect to a natural notion of probabilistic testing.},
  doi      = {https://doi.org/10.1016/S0304-3975(97)00056-X},
  url      = {https://www.sciencedirect.com/science/article/pii/S030439759700056X},
}

@InProceedings{Hermanns2010,
  author    = {Hermanns, Holger and Katoen, Joost-Pieter},
  booktitle = {Formal Methods for Components and Objects},
  title     = {The How and Why of Interactive Markov Chains},
  year      = {2010},
  address   = {Berlin, Heidelberg},
  editor    = {de Boer, Frank S. and Bonsangue, Marcello M. and Hallerstede, Stefan and Leuschel, Michael},
  pages     = {311--337},
  publisher = {Springer Berlin Heidelberg},
  abstract  = {This paper reviews the model of interactive Markov chains (IMCs, for short), an extension of labelled transition systems with exponentially delayed transitions. We show that IMCs are closed under parallel composition and hiding, and show how IMCs can be compositionally aggregated prior to analysis by e.g., bisimulation minimisation or aggressive abstraction based on simulation pre-congruences. We survey some recent analysis techniques for IMCs, i.e., explaining how measures such as reachability probabilities can be obtained. Finally, we demonstrate that IMCs are a natural (and simple) semantic model for stochastic process algebras and generalised stochastic Petri nets and can be used for engineering formalisms such as AADL and dynamic fault trees.},
  isbn      = {978-3-642-17071-3},
}

@InBook{Hermanns2002,
  author    = {Hermanns, Holger},
  pages     = {57--88},
  publisher = {Springer Berlin Heidelberg},
  title     = {Interactive Markov Chains},
  year      = {2002},
  address   = {Berlin, Heidelberg},
  isbn      = {978-3-540-45804-3},
  abstract  = {This chapter introduces the central formalism of this book, Interactive Markov Chains1 (IMC). It arises as an integration of interactive processes and continuous-time Markov chains. There are different ways to combine both formalisms, and some of them have appeared in the literature. We therefore begin with a detailed discussion of the different integration possibilities and argue why we take which decision. As a result IMC combine the different ingredients as orthogonal to each other as possible. We proceed by defining composition operators for IMC. Wethen focus our attention on the discussion of strong and weak bisimilarity, incorporating the notion of maximal progress into the definitions. In order to efficiently compute these relations we develop algorithms that are more involved than the ones presented in earlier chapters. Anyhow, we prove that their computational complexity is not increased. A small example of using IMC to compositionally specify and aggregate the leaky bucket principle concludes this chapter.},
  booktitle = {Interactive Markov Chains: And the Quest for Quantified Quality},
  doi       = {10.1007/3-540-45804-2_4},
  url       = {https://doi.org/10.1007/3-540-45804-2_4},
}

@InProceedings{Vardi1985,
  author    = {Vardi, Moshe Y.},
  booktitle = {26th Annual Symposium on Foundations of Computer Science (sfcs 1985)},
  title     = {Automatic verification of probabilistic concurrent finite state programs},
  year      = {1985},
  pages     = {327-338},
  doi       = {10.1109/SFCS.1985.12},
}

@Article{Hartmanns2015,
  author   = {Arnd Hartmanns and Holger Hermanns},
  journal  = {Science of Computer Programming},
  title    = {In the quantitative automata zoo},
  year     = {2015},
  issn     = {0167-6423},
  note     = {Fundamentals of Software Engineering (selected papers of FSEN 2013)},
  pages    = {3-23},
  volume   = {112},
  abstract = {Quantitative model checking and performance evaluation deal with the analysis of complex systems that must not only satisfy correctness requirements, but also meet performance and reliability goals. Models of such systems therefore need to represent the necessary quantitative information about probabilistic decisions, real-time phenomena, or continuous dynamics. At the same time, nondeterminism needs to be properly captured as in classical verification, so as to enable abstraction and compositional modelling. These aspects span a large spectrum of automata-based quantitative models which have been studied in the verification and performance evaluation literature. In this paper, we embark on a guided tour through this zoo of quantitative models. Starting from the basic formalisms of labelled transition systems and also Markov chains, we look at how timed and hybrid automata add real-time aspects as well as continuous dynamics, and we study extensions that provide for behaviour governed by discrete and continuous probability distributions. For each of the automata models, we outline its definition, provide a small illustrative example, summarise its expressive power, and survey available formal analysis techniques as well as selected practical applications.},
  doi      = {https://doi.org/10.1016/j.scico.2015.08.009},
  keywords = {Quantitative verification, Markov decision processes, Timed automata, Hybrid automata, Compositional modelling},
  url      = {https://www.sciencedirect.com/science/article/pii/S0167642315002580},
}

@InProceedings{Hillston2005,
  author    = {Hillston, J.},
  booktitle = {20th Annual IEEE Symposium on Logic in Computer Science (LICS' 05)},
  title     = {Process algebras for quantitative analysis},
  year      = {2005},
  pages     = {239-248},
  doi       = {10.1109/LICS.2005.35},
}

@InProceedings{Katoen2016,
  author    = {Katoen, Joost-Pieter},
  booktitle = {Proceedings of the 31st Annual ACM/IEEE Symposium on Logic in Computer Science},
  title     = {The Probabilistic Model Checking Landscape},
  year      = {2016},
  address   = {New York, NY, USA},
  pages     = {31–45},
  publisher = {Association for Computing Machinery},
  series    = {LICS '16},
  abstract  = {Randomization is a key element in sequential and distributed computing. Reasoning about randomized algorithms is highly non-trivial. In the 1980s, this initiated first proof methods, logics, and model-checking algorithms. The field of probabilistic verification has developed considerably since then. This paper surveys the algorithmic verification of probabilistic models, in particular probabilistic model checking. We provide an informal account of the main models, the underlying algorithms, applications from reliability and dependability analysis---and beyond---and describe recent developments towards automated parameter synthesis.},
  doi       = {10.1145/2933575.2934574},
  isbn      = {9781450343916},
  keywords  = {model checking, fault trees, applications, abstraction, probabilistic logics, Markov decision processes, parameter synthesis, Markov chains},
  location  = {New York, NY, USA},
  numpages  = {15},
  url       = {https://doi.org/10.1145/2933575.2934574},
}

@Comment{jabref-meta: databaseType:bibtex;}

@Comment{jabref-meta: grouping:
0 AllEntriesGroup:;
1 StaticGroup:Termination\;0\;1\;0x8a8a8aff\;\;\;;
}
